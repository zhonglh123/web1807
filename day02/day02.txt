1.git指令
    1）git仓库的状态与区域
        3个区域：
            工作区：工作的区域，用于写作代码的空间
            暂存区：
            当前HEAD指向的分支
        4个状态：
            1.unmodified:工作区和暂存区中没有任何需要提交的修改，工作区很干净
            2.untracked:仓库中有新建的文件，但是还没有提交过，没有被纳入到git的控制之中
            3.modified:有文件被修改，但是还没有提交到暂存区
            4.staged:工作区的修改已经被提交到了暂存区，即已经执行过git add命令，正在等待被提交到master上

    2）撤销修改
        1.撤销工作区的修改
            git checkout -- 文件名
            文件修改以后，没有被执行git add指令
        2.撤销暂存区的修改
            文件已经被修改，并且已经执行过git add,但是还没有git commit
            分两步:
                撤销暂存操作:
                    git reset HEAD 文件名
                撤销工作区的修改
                    git checkout -- 文件名
        3.撤销master的修改
            无法撤销，可以通过版本回馈的方式
            撤销前，先查看提交的id，确定需要回退到哪个版本
                git reset --hard 提交的id
        
    3）查看提交信息/存盘点
        git log
        如果查询的提交过多，无法一次性全部显示，可以按shift+q提前结束
        git log --pretty=oneline

        练习：
        1.在D盘下新建test文件夹，初始化本地仓库
        2.新建文件1.txt，提交
        3.修改1.txt的内容，查看仓库的状态有何变化，并提交
        4.新建2.txt，查看仓库的状态有何变化，并提交
        5.修改2.txt的内容，提交
        6.修改1.txt内容，查看状态，撤销1.txt的修改
        7.修改2.txt内容，并提交到暂存区，查看状态后，撤销2.txt的修改
        8.修改1.txt和2.txt的内容，然后提交，add.commit
        9.查看提交的信息，存盘点
        10.将仓库的内容回退到第4步
    
    4）关于存盘点(HEAD)
        实现版本的控制
        git中把每一次的提交都会串成一条时间线，这个时间线就是一条分支，默认只有一条分支master，也称之为主分支
        而HEAD指向的就是当前分支

    5）分支
        1.创建分支
            git branch 分支名
            将当前所在的分支复制一条新的分支出来
        2.查看当前所有的分支
            git branch
            其中前面有*的表示当前所在分支
        3.切换分支
            git checkout 分支名称
            在分支上的操作不会影响其他分支上的数据
        4.合并分支
            git merge 分支名称
            将指定名称的分支的内容合并到当前分支
            eg：
                在master分支下使用 git merge v1
                将v1的分支内容合并到master中，
                master分支的内容发生改变，v1分支的内容不会发生改变
        5.删除分支
            git branch -d 分支名称
                删除指定分支(不能删除当前所在的分支)
            git branch -D 分支名称
                强制删除未合并的分支
        
        练习：
        1.删除test文件，重新创建
        2.初始化仓库，新建1.txt，将1.txt内容修改为abc，提交
        3.创建分支v1，查看所有分支，切换v1分支
        4.将1.txt内容修改为123，提交
        5.切换到master分支，查看1.txt内容是否发生变化
        6.将v1内容合并到master分支，分别查看master和v1分支中1.txt的内容
        7.创建v2分支，在v2分支中创建2.txt提交
        8.切换到master分支，查看master中是否有2.txt文件
        9.删除v1分支

2、GitHub的使用
    远程仓库
    1）注册登录
    2）新建远程仓库
        单击右上角 + ---->new repository---->在Repository name框里输入远程仓库的名称
    3）将本地仓库与远程仓库相关联
        git remote add origin 远程仓库地址.git
            add：表示添加关联
            origin:表示一个变量名，方便后续操作的使用，指代后面的"远程仓库地址.git"
    4）将本地仓库的内容推送给远程仓库
        git push -u origin master
            -u:只在第一次推送的时候添加，以后推送不需要再添加
                告诉远程仓库创建一个master分支
            origin：关联本地与远程仓库时起的别名，指代远程仓库的地址，关联时可以起其他别名，不一定是origin
    5）删除远程仓库
        settings---->danger zone
    6）删除本地仓库与远程仓库之间的关联
        git remote remove origin

密钥
公钥 私钥
        
        
